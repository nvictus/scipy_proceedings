@INPROCEEDINGS{Fangohr2020-vt,
  title     = "Data exploration and analysis with Jupyter notebooks",
  booktitle = "Proc. {ICALEPCS'19}",
  author    = "Fangohr, Hans and Beg, Marijan and Bergemann, Martin and Bondar,
               Valerii and Brockhauser, Sandor and Campbell, Aidan and Carinan,
               Cammille and Costa, Raul and Dall'Antonia, Fabio and Danilevski,
               Cyril and {E, Juncheng} and Ehsan, Wajid and Esenov, Sergey and
               Fabbri, Riccardo and Fangohr, Susanne and
               Fernandez-del-Castillo, Enol and Flucke, Gero and
               Fortmann-Grote, Carsten and Fulla Marsa, Daniel and Giovanetti,
               Gabriele and Goeries, Dennis and G{\"o}tz, Andrew and Hall,
               Jamie and Hauf, Steffen and Hickin, David and Holm Rod, Thomas
               and Jarosiewicz, Tobiasz and Kamil, Ebad and Karnevskiy, Mikhail
               and Kieffer, Jerome and Kirienko, Yury and Klimovskaia, Anna and
               Kluyver, Thomas and Kuster, Markus and Le Guyader, Lo{\"\i}c and
               Madsen, Anders and Maia, Luis and Mamchyk, Denys and Mercadier,
               Laurent and Michelat, Thomas and M{\"o}ller, Johannes and
               Mohacsi, Istvan and Parenti, Andrea and Pellegrini, Eric and
               Perrin, Jean-Francois and Reiser, Mario and Reppin, Johannes and
               Rosca, Robert and R{\"u}ck, Denivy and R{\"u}ter, Tonn and
               Santos, Hugo and Schaffer, Robert and Scherz, Andreas and
               Schl{\"u}nzen, Frank and Scholz, Markus and Schuh, Michael and
               Selknaes, Jesper Rude and Silenzi, Alessandro and Sipos, Gergely
               and Spirzewski, Michal and Sztuk, Jolanta and Szuba, Janusz and
               Taylor, Jonathan and Trojanowski, Sebastian and Wrona, Krzysztof
               and Yaroslavtsev, Alexander and Zhu, Jun",
  abstract  = "Jupyter notebooks are executable documents that are displayed in
               a web browser. The notebook elements consist of human-authored
               contextual elements and computer code, and computer-generated
               output from executing the computer code. Such outputs can
               include tables and plots. The notebook elements can be executed
               interactively, and the whole notebook can be saved, re-loaded
               and re-executed, or converted to read-only formats such as HTML,
               LaTeX and PDF. Exploiting these characteristics, Jupyter
               notebooks can be used to improve the effectiveness of
               computational and data exploration, documentation,
               communication, reproducibility and re-usability of scientific
               research results. They also serve as building blocks of remote
               data access and analysis as is required for facilities hosting
               large data sets and initiatives such as the European Open
               Science Cloud (EOSC). In this contribution we report from our
               experience of using Jupyter notebooks for data analysis at
               research facilities, and outline opportunities and future plans.",
  publisher = "JACoW Publishing, Geneva, Switzerland",
  month     =  "Aug",
  year      =  2020
}

@ARTICLE{Beg2021-rh,
  title     = "Using Jupyter for Reproducible Scientific Workflows",
  author    = "Beg, Marijan and Taka, Juliette and Kluyver, Thomas and
               Konovalov, Alexander and Ragan-Kelley, Min and Thi{\'e}ry,
               Nicolas M and Fangohr, Hans",
  abstract  = "Literate computing has emerged as an important tool for
               computational studies and open science, with growing folklore of
               best practices. In this work, we report two case studies---one
               in computational magnetism and another in computational
               mathematics---where domain-specific software was exposed to the
               Jupyter environment. This enables high level control of
               simulations and computation, interactive exploration of
               computational results, batch processing on HPC resources, and
               reproducible workflow documentation in Jupyter notebooks. In the
               first study, Ubermag drives existing computational
               micromagnetics software through a domain-specific language
               embedded in Python. In the second study, a dedicated Jupyter
               kernel interfaces with the GAP system for computational discrete
               algebra and its dedicated programming language. In light of
               these case studies, we discuss the benefits of this approach,
               including progress toward more reproducible and reusable
               research results and outputs, notably through the use of
               infrastructure such as JupyterHub and Binder.",
  journal   = "Comput. Sci. Eng.",
  publisher = "IEEE",
  volume    =  23,
  number    =  2,
  pages     = "36--46",
  year      =  2021
}

@INPROCEEDINGS{Project_Jupyter2018-yq,
  title      = "{B}inder 2.0 - {R}eproducible, interactive, sharable
                environments for science at scale",
  booktitle  = "Proceedings of the Python in Science Conference",
  author     = "{Project Jupyter} and Bussonnier, Matthias and Forde, Jessica
                and Freeman, Jeremy and Granger, Brian and Head, Tim and
                Holdgraf, Chris and Kelley, Kyle and Nalvarte, Gladys and
                Osheroff, Andrew and Pacer, M and Panda, Yuvi and Perez,
                Fernando and Ragan-Kelley, Benjamin and Willing, Carol",
  editor     = "Akici, Fatih and Lippa, David and Niederhut, Dillon and Pacer,
                M",
  publisher  = "SciPy",
  year       =  2018,
  conference = "Python in Science Conference",
  location   = "Austin, Texas"
}

@INPROCEEDINGS{Kluyver2016-xa,
  title      = "Jupyter Notebooks -- a publishing format for reproducible
                computational workflows",
  booktitle  = "Positioning and Power in Academic Publishing: Players, Agents
                and Agendas",
  author     = "Kluyver, Thomas and Ragan-Kelley, Benjamin and P{\'e}rez,
                Fernando and Granger, Brian and Bussonnier, Matthias and
                Frederic, Jonathan and Kelley, Kyle and Hamrick, Jessica and
                Grout, Jason and Corlay, Sylvain and Ivanov, Paul and Avila,
                Dami{\'a}n and Abdalla, Safia and Willing, Carol",
  editor     = "Loizides, Fernando and Scmidt, Birgit",
  abstract   = "It is increasingly necessary for researchers in all fields to
                write computer code, and in order to reproduce research
                results, it is important that this code is published. We
                present Jupyter notebooks, a document format for publishing
                code, results and explanations in a form that is both readable
                and executable. We discuss various tools and use cases for
                notebook documents.",
  publisher  = "IOS Press",
  pages      = "87--90",
  year       =  2016,
  language   = "en",
  conference = "20th International Conference on Electronic Publishing
                (01/01/16)"
}

@ARTICLE{Perez2007-im,
  title     = "{IPython}: A System for Interactive Scientific Computing",
  author    = "P{\'e}rez, Fernando and Granger, Brian E",
  abstract  = "Python offers basic facilities for interactive work and a
               comprehensive library on top of which more sophisticated systems
               can be built. The IPython project provides on enhanced
               interactive environment that includes, among other features,
               support for data visualization and facilities for distributed
               and parallel computation",
  journal   = "Comput. Sci. Eng.",
  publisher = "IEEE",
  volume    =  9,
  number    =  3,
  pages     = "21--29",
  year      =  2007
}

@ARTICLE{Granger2021-jb,
  title     = "Jupyter: Thinking and Storytelling With Code and Data",
  author    = "Granger, Brian E and P{\'e}rez, Fernando",
  abstract  = "Project Jupyter is an open-source project for interactive
               computing widely used in data science, machine learning, and
               scientific computing. We argue that even though Jupyter helps
               users perform complex, technical work, Jupyter itself solves
               problems that are fundamentally human in nature. Namely, Jupyter
               helps humans to think and tell stories with code and data. We
               illustrate this by describing three dimensions of Jupyter: 1)
               interactive computing; 2) computational narratives; and 3) the
               idea that Jupyter is more than software. We illustrate the
               impact of these dimensions on a community of practice in earth
               and climate science.",
  journal   = "Comput. Sci. Eng.",
  publisher = "IEEE",
  volume    =  23,
  number    =  2,
  pages     = "7--14",
  year      =  2021
}

@ARTICLE{Heer2024-rr,
  title    = "Mosaic: An Architecture for Scalable \& Interoperable Data Views",
  author   = "Heer, Jeffrey and Moritz, Dominik",
  abstract = "Mosaic is an architecture for greater scalability, extensibility,
              and interoperability of interactive data views. Mosaic decouples
              data processing from specification logic: clients publish their
              data needs as declarative queries that are then managed and
              automatically optimized by a coordinator that proxies access to a
              scalable data store. Mosaic generalizes Vegalite's selection
              abstraction to enable rich integration and linking across
              visualizations and components such as menus, text search, and
              tables. We demonstrate Mosaic's expressiveness, extensibility,
              and interoperability through examples that compose diverse
              visualization, interaction, and optimization techniques-many
              constructed using vgplot, a grammar of interactive graphics in
              which graphical marks act as Mosaic clients. To evaluate
              scalability, we present benchmark studies with order-of-magnitude
              performance improvements over existing web-based visualization
              systems-enabling flexible, real-time visual exploration of
              billion+ record datasets. We conclude by discussing Mosaic's
              potential as an open platform that bridges visualization
              languages, scalable visualization, and interactive data systems
              more broadly.",
  journal  = "IEEE Trans. Vis. Comput. Graph.",
  volume   =  30,
  number   =  1,
  pages    = "436--446",
  month    =  "Jan",
  year     =  2024,
  language = "en"
}

@UNPUBLISHED{Gadhave2023-rl,
  title    = "Persist: Persistent and reusable interactions in computational
              notebooks",
  author   = "Gadhave, Kiran and Cutler, Zach and Lex, Alexander",
  abstract = "Computational notebooks, such as Jupyter, support rich data
              visualization. However, even when visualizations in notebooks are
              interactive, they still are a dead end: Interactive data
              manipulations, such as selections, applying labels, filters,
              categorizations, or fixes to column or cell values, could be
              efficiently apply in interactive visual components, but
              interactive components typically cannot manipulate Python data
              structures. Furthermore, actions performed in interactive plots
              are volatile, i.e., they are lost as soon as the cell is re-run,
              prohibiting reusability and reproducibility. To remedy this, we
              introduce Persist, a family of techniques to capture and apply
              interaction provenance to enable persistence of interactions.
              When interactions manipulate data, we make the transformed data
              available in dataframes that can be accessed in downstream code
              cells. We implement our approach as a JupyterLab extension that
              supports tracking interactions in Vega-Altair plots and in a data
              table view. Persist can re-execute the interaction provenance
              when a notebook or a cell is re-executed enabling reproducibility
              and re-use. We evaluated Persist in a user study targeting data
              manipulations with 11 participants skilled in Python and Pandas,
              comparing it to traditional code-based approaches. Participants
              were consistently faster with Persist, were able to correctly
              complete more tasks, and expressed a strong preference for
              Persist.",
  journal  = "Computer Graphics Forum (EuroVis), to appear",
  month    =  "Dec",
  year     =  2023
}

@article{rojas2021modules,
  title={ES Modules},
  author={Rojas, Carlos and Rojas, Carlos},
  journal={Building Native Web Components: Front-End Development with Polymer and Vue. js},
  pages={53--60},
  year={2021},
  publisher={Springer}
}

@misc{doc_juparch,
  title = "{Jupyter documentation}",
  url = {https://docs.jupyter.org/en/latest/projects/architecture/content-architecture.html},
  note = {Accessed: 30 May 2024}
}
@misc{doc_jupmsgprotocol,
  title = {Jupyter Client documentation},
  url = {https://jupyter-client.readthedocs.io/en/stable/},
  note = {Accessed: 30 May 2024}
}
@misc{doc_jupnbformat,
  title = {nbformat documentation},
  url = {https://nbformat.readthedocs.io/en/stable/format_description.html},
  note = {Accessed: 30 May 2024}
}
@misc{doc_widgets,
  title = "{{Low Level Widget Explanation}}",
  url = {https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20Low%20Level.html},
  note = {Accessed: 30 May 2024}
}
@misc{ipywidgets,
  title = "{ipywidgets}",
  url = {https://ipywidgets.readthedocs.io/},
  note = {Accessed: 30 May 2024}
}
@misc{js_cookiecutter,
  title = {widget-cookiecutter},
  url = {https://github.com/jupyter-widgets/widget-cookiecutter},
  note = {Accessed: 30 May 2024}
}
@misc{ts_cookiecutter,
  title = {widget-ts-cookiecutter},
  url = {https://github.com/jupyter-widgets/widget-ts-cookiecutter},
  note = {Accessed: 30 May 2024}
}

@article{VanderPlas2018,
  doi = {10.21105/joss.01057},
  url = {https://doi.org/10.21105/joss.01057},
  year = {2018},
  publisher = {The Open Journal},
  volume = {3},
  number = {32},
  pages = {1057},
  author = {Jacob VanderPlas and Brian E. Granger and Jeffrey Heer and Dominik Moritz and Kanit Wongsuphasawat and Arvind Satyanarayan and Eitan Lees and Ilia Timofeev and Ben Welsh and Scott Sievert},
  title = {Altair: Interactive Statistical Visualizations for Python},
  journal = {Journal of Open Source Software}
}

@article{manzt2023,
    author = {Manz, Trevor and L’Yi, Sehi and Gehlenborg, Nils},
    title = "{Gos: a declarative library for interactive genomics visualization in Python}",
    journal = {Bioinformatics},
    volume = {39},
    number = {1},
    pages = {btad050},
    year = {2023},
    month = {01},
    abstract = "{Gos is a declarative Python library designed to create interactive multiscale visualizations of genomics and epigenomics data. It provides a consistent and simple interface to the flexible Gosling visualization grammar. Gos hides technical complexities involved with configuring web-based genome browsers and integrates seamlessly within computational notebooks environments to enable new interactive analysis workflows.Gos is released under the MIT License and available on the Python Package Index (PyPI). The source code is publicly available on GitHub (https://github.com/gosling-lang/gos), and documentation with examples can be found at https://gosling-lang.github.io/gos.}",
    issn = {1367-4811},
    doi = {10.1093/bioinformatics/btad050},
    url = {https://doi.org/10.1093/bioinformatics/btad050},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/39/1/btad050/49030527/btad050.pdf},
}



